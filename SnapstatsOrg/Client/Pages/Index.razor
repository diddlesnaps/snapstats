@page "/"
@implements IDisposable
@inject IGraphQLClient Client
@inject PersistentComponentState ApplicationState

<PageTitle>Snapstats.org Snap Store statistics</PageTitle>
<HeadContent>
	<meta name="description" content="Statistics about Snap Packages within the Snap Store for Linux" />

	<!-- Facebook -->
	<meta property="og:type" content="website" />
	<meta property="og:title" content="Snapstats.org Snap Store statistics" />
	<meta property="og:description" content="Statistics about Snap Packages within the Snap Store for Linux" />
	<meta property="og:image" content="/favicons/android-icon-512x512.png" />
	<meta property="og:image:secure_url" content="/favicons/android-icon-512x512.png" />
	<meta property="og:image:width" content="512" />
	<meta property="og:image:height" content="512" />
	<meta property="og:image:alt" content="Icon of Snapstats.org" />

	<!-- Twitter -->
	<meta name="twitter:card" content="summary" />
	<meta name="twitter:creator" content="@("@diddledani")" />
	<meta name="twitter:title" content="Snapstats.org Snap Store statistics" />
	<meta name="twitter:description" content="Statistics about Snap Packages within the Snap Store for Linux" />
	<meta name="twitter:image" content="/favicons/android-icon-512x512.png" />

	<!-- Feed -->
	<link rel="alternate home" type="application/rss+xml" href="/snaps/feed.rss"
		title="RSS feed of new Snaps"/>
	<link rel="alternate home" type="application/atom+xml" href="/snaps/feed.atom"
		title="Atom feed of new Snaps"/>
	<link rel="alternate home" type="application/activitystream+json" href="/snaps/feed.json"
		title="Activity Streams JSON feed of new Snaps"/>
</HeadContent>

<h1>Total Snaps count</h1>
@if (state?.snapCounts?.snapCounts is not null)
{
	<p>There are <strong>@(state.snapCounts.snapCounts.FirstOrDefault()?.total ?? 0)</strong> Snaps currently in the Store, of which <strong>@((state.snapCounts.snapCounts.FirstOrDefault()?.total - state.snapCounts.snapCounts.FirstOrDefault()?.filtered) ?? 0)</strong> appear to be test or hello-world Snaps. Test and hello-world Snaps are identified by a name that begins with <code>hello-</code> or <code>test-</code>, or a name that ends with <code>-hello</code> or <code>-test</code>. All other statistics on this site exclude those test or hello-world Snaps.</p>
	<p><strong>@state.verifiedDeveloperCount</strong> <span class="verified">Verified</span> developers have published <strong>@state.verifiedSnapCount</strong> Snaps.</p>
}
else
{
	<p>There are an unknown number of Snaps currently in the Store.</p>
}

<h2>The six most-recently added Snaps <a href="/snaps/feed.rss"><img class="rssicon" src="/rssfeed.svg" title="Newest Snaps RSS feed" alt="RSS feed"></a></h2>

<SnapList snaps="state?.snaps" />

<h2>Developers</h2>
@if (state?.developerCounts.developerCounts is not null && state.developerCounts.developerCounts.Length > 0)
{
	<p>There are <strong>@state.developerCounts.developerCounts.First().total</strong> developers who have published at least one snap.</p>

	<h3>Developer Averages</h3>
	<p>
		Developers with published Snaps have each published an average (<a href="https://en.wikipedia.org/wiki/Arithmetic_mean">mean</a>) of <strong>@state.developerCounts.developerCounts.First().mean</strong> Snaps.
		The most common number of Snaps published per developer (<a href="https://en.wikipedia.org/wiki/Mode_(statistics)">mode</a>) is <strong>@state.developerCounts.developerCounts.First().mode</strong>.
	</p>
}
else
{
	<p>There are an unknown number of developers who have published at least one snap.</p>
}

<DonateButton/>

@*Timeline title="Developer counts timeline" data={[
	{title: "Developer Count", items: result.data.developerCountTimeline},
	{title: "Snap Count", items: result.data.snapCountTimeline},
]} /*@

@code{
	const string Query = @"
	query {
		snapCountsByDate{
			_id
			snapCounts{
				date
				total
				filtered
			}
		}
		developerCountsByDate{
			_id
			developerCounts{
				date
				total
				mean
				median
				mode
			}
		}
		snapsByDate(limit:6){
			snap_id
			package_name
			title
			summary
			icon_url
			ratings_average
		}
		findSnapsCount(developer_validation:VERIFIED)
		verifiedDeveloperCount
	}
	";


	private IndexState? state;

	private class IndexState
	{
		public SnapCountByDate snapCounts { get; set; } = new SnapCountByDate();
		public DeveloperCountByDate developerCounts { get; set; } = new DeveloperCountByDate();
		public Snap[] snaps { get; set; } = Array.Empty<Snap>();
		public uint verifiedSnapCount { get; set; } = 0;
		public uint verifiedDeveloperCount { get; set; } = 0;
	}

	private PersistingComponentStateSubscription persistingSubscription;

	protected override async Task OnInitializedAsync()
	{
		persistingSubscription = 
			ApplicationState.RegisterOnPersisting(PersistIndex);

		if (ApplicationState.TryTakeFromJson<IndexState>(
					"savedstate", out var restored))
		{
			state = restored!;
		}
		else
		{
			GraphQLRequest request = new GraphQLRequest
			{
				Query = Query,
			};
			var response = await Client.SendQueryAsync<IndexQuery>(request).ConfigureAwait(false);
			state = new()
				{
					snapCounts = response.Data?.snapCountsByDate ?? new SnapCountByDate(),
					developerCounts = response.Data?.developerCountsByDate ?? new DeveloperCountByDate(),
					snaps = response.Data?.snapsByDate ?? Array.Empty<Snap>(),
					verifiedSnapCount = response.Data?.findSnapsCount ?? 0,
					verifiedDeveloperCount = response.Data?.verifiedDeveloperCount ?? 0,
				};
		}
    }

	private Task PersistIndex()
    {
        ApplicationState.PersistAsJson("savedstate", state);

        return Task.CompletedTask;
    }

	void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }
}