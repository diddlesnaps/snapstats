@page "/"
@inject IGraphQLClient Client

<Title>Snapstats.org Snap Store statistics</Title>
<Meta name="description" content="Statistics about Snap Packages within the Snap Store for Linux" />

<!-- Facebook -->
<Meta property="og:type" content="website" />
<Meta property="og:title" content="Snapstats.org Snap Store statistics" />
<Meta property="og:description" content="Statistics about Snap Packages within the Snap Store for Linux" />
<Meta property="og:image" content="/favicons/android-icon-512x512.png" />
<Meta property="og:image:secure_url" content="/favicons/android-icon-512x512.png" />
<Meta property="og:image:width" content="512" />
<Meta property="og:image:height" content="512" />
<Meta property="og:image:alt" content="Icon of Snapstats.org" />

<!-- Twitter -->
<Meta name="twitter:card" content="summary" />
<Meta name="twitter:creator" content="@("@diddledani")" />
<Meta name="twitter:title" content="Snapstats.org Snap Store statistics" />
<Meta name="twitter:description" content="Statistics about Snap Packages within the Snap Store for Linux" />
<Meta name="twitter:image" content="/favicons/android-icon-512x512.png" />

<!-- Feed -->
<Link rel="alternate home" type="application/rss+xml" href="/snaps/feed.rss"
    title="RSS feed of new Snaps"/>
<Link rel="alternate home" type="application/atom+xml" href="/snaps/feed.atom"
    title="Atom feed of new Snaps"/>
<Link rel="alternate home" type="application/activitystream+json" href="/snaps/feed.json"
    title="Activity Streams JSON feed of new Snaps"/>

<h1>Total Snaps count</h1>
@if (snapCounts?.snapCounts is not null)
{
	<p>There are <strong>@(snapCounts.snapCounts.FirstOrDefault()?.total ?? 0)</strong> Snaps currently in the Store, of which <strong>@((snapCounts.snapCounts.FirstOrDefault()?.total - snapCounts.snapCounts.FirstOrDefault()?.filtered) ?? 0)</strong> appear to be test or hello-world Snaps. Test and hello-world Snaps are identified by a name that begins with <code>hello-</code> or <code>test-</code>, or a name that ends with <code>-hello</code> or <code>-test</code>. All other statistics on this site exclude those test or hello-world Snaps.</p>
	<p><span class="verified">Verified</span> developers, a total of <strong>@verifiedDeveloperCount</strong> developers, have published <strong>@verifiedSnapCount</strong> Snaps.</p>
}
else
{
	<p>There are an unknown number of Snaps currently in the Store.</p>
}

<h2>The six most-recently added Snaps <a href="/snaps/feed.rss"><img class="rssicon" src="/rssfeed.svg" title="Newest Snaps RSS feed" alt="RSS feed"></a></h2>

<SnapList snaps="snaps" />

<h2>Developers</h2>
@if (developerCounts.developerCounts is not null && developerCounts.developerCounts.Length > 0)
{
	<p>There are <strong>@developerCounts.developerCounts.First().total</strong> developers who have published at least one snap.</p>

	<h3>Developer Averages</h3>
	<p>
		Developers with published Snaps have each published an average (<a href="https://en.wikipedia.org/wiki/Arithmetic_mean">mean</a>) of <strong>@developerCounts.developerCounts.First().mean</strong> Snaps.
		The most common number of Snaps published per developer (<a href="https://en.wikipedia.org/wiki/Mode_(statistics)">mode</a>) is <strong>@developerCounts.developerCounts.First().mode</strong>.
	</p>
}
else
{
	<p>There are an unknown number of developers who have published at least one snap.</p>
}

<DonateButton/>

@*Timeline title="Developer counts timeline" data={[
	{title: "Developer Count", items: result.data.developerCountTimeline},
	{title: "Snap Count", items: result.data.snapCountTimeline},
]} /*@

@code{
        const string Query = @"
		query {
			snapCountsByDate{
				_id
				snapCounts{
				  date
				  total
				  filtered
				}
			}
			developerCountsByDate{
				_id
				developerCounts{
					date
					total
					mean
					median
					mode
				}
			}
			snapsByDate(limit:6){
				snap_id
				package_name
				title
				summary
				icon_url
				ratings_average
			}
			findSnapsCount(developer_validation:VERIFIED)
			verifiedDeveloperCount
		}
	";


    protected SnapCountByDate snapCounts = new SnapCountByDate();
    protected DeveloperCountByDate developerCounts = new DeveloperCountByDate();
    protected Snap[] snaps = Array.Empty<Snap>();
    protected uint verifiedSnapCount = 0;
    protected uint verifiedDeveloperCount = 0;

    protected override async Task OnInitializedAsync()
    {
        GraphQLRequest request = new GraphQLRequest
        {
            Query = Query,
        };
        var response = await Client.SendQueryAsync<IndexQuery>(request).ConfigureAwait(false);
        snapCounts = response.Data?.snapCountsByDate ?? new SnapCountByDate();
        developerCounts = response.Data?.developerCountsByDate ?? new DeveloperCountByDate();
        snaps = response.Data?.snapsByDate ?? Array.Empty<Snap>();
        verifiedSnapCount = response.Data?.findSnapsCount ?? 0;
        verifiedDeveloperCount = response.Data?.verifiedDeveloperCount ?? 0;
    }
}