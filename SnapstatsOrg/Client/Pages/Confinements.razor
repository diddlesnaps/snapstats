@page "/confinements"
@implements IDisposable
@inject IGraphQLClient Client
@inject PersistentComponentState ApplicationState

<PageTitle>Snap Store confinements statistics | Snapstats.org</PageTitle>
<HeadContent>
    <meta name="description" content="Statistics about Snap Package confinement mechanisms within the Snap Store for Linux" />

    @* Facebook *@
    <meta property="og:type" content="website" />
    <meta property="og:title" content="Snap Store architectures statistics | Snapstats.org" />
    <meta property="og:description" content="Statistics about Snap Package confinement mechanisms within the Snap Store for Linux" />
    <meta property="og:image" content="/favicons/android-icon-512x512.png" />
    <meta property="og:image:secure_url" content="/favicons/android-icon-512x512.png" />
    <meta property="og:image:width" content="512" />
    <meta property="og:image:height" content="512" />
    <meta property="og:image:alt" content="Icon of Snapstats.org" />

    @* Twitter *@
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:creator" content="@("@diddledani")" />
    <meta name="twitter:image" content="/favicons/android-icon-512x512.png" />
    <meta name="twitter:title" content="Snap Store architectures statistics | Snapstats.org" />
    <meta name="twitter:description" content="Statistics about Snap Package confinement mechanisms within the Snap Store for Linux" />
</HeadContent>

<h1>Confinements</h1>

<DonateButton/>

<TimelineChart title="Confinements timeline" data="timeline" />

<a href="/">Go back to the homepage...</a>

@code {
	private const string Query = @"
		query {
			confinementTimeline{
				_id
                counts{
                    date
                    count
                }
			}
		}
	";

	protected Timeline[] timeline = Array.Empty<Timeline>();

    private PersistingComponentStateSubscription persistingSubscription;

	protected override async Task OnInitializedAsync()
    {
        persistingSubscription = 
            ApplicationState.RegisterOnPersisting(PersistTimeline);

        if (ApplicationState.TryTakeFromJson<Timeline[]>(
                    "timeline", out var restored))
        {
            timeline = restored!;
        }
        else
        {
            GraphQLRequest request = new GraphQLRequest
            {
                Query = Query,
            };
            var response = await Client.SendQueryAsync<ConfinementTimelineQuery>(request).ConfigureAwait(false);
            timeline = response.Data.confinementTimeline;
        }
    }

    private Task PersistTimeline()
    {
        ApplicationState.PersistAsJson("timeline", timeline);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }
}
