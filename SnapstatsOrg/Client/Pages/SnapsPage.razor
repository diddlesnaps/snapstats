@page "/snaps"
@implements IDisposable
@inject IGraphQLClient Client
@inject NavigationManager NavManager
@inject PersistentComponentState ApplicationState

<PageTitle>Search Snaps in the Snap Store | Snapstats.org</PageTitle>
<HeadContent>
	<meta name="description" content="Search Snaps in the Snap Store for Linux" />

	<!-- Facebook -->
	<meta property="og:type" content="website" />
	<meta property="og:title" content="Search Snaps in the Snap Store" />
	<meta property="og:description" content="Search Snaps in the Snap Store for Linux" />
	<meta property="og:image" content="/favicons/android-icon-512x512.png" />
	<meta property="og:image:secure_url" content="/favicons/android-icon-512x512.png" />
	<meta property="og:image:width" content="512" />
	<meta property="og:image:height" content="512" />
	<meta property="og:image:alt" content="Icon of Snapstats.org" />

	<!-- Twitter -->
	<meta name="twitter:card" content="summary" />
	<meta name="twitter:creator" content="@("@diddledani")" />
	<meta name="twitter:title" content="Search Snaps in the Snap Store" />
	<meta name="twitter:description" content="Search Snaps in the Snap Store for Linux" />
	<meta name="twitter:image" content="/favicons/android-icon-512x512.png" />
</HeadContent>

<h1>Search the Snap Store</h1>
<div class='search'>
    <label>
        Enter a term to search
        <input type="text" class="form-control" @oninput="OnSearchChanged" @onblur="OnSearchFocusLost" @onkeyup="OnSearchTyping" />
        @*<button @onclick="OnButtonClicked">Search</button>*@
    </label>
</div>

<div>
    <h2>Search results:</h2>
    <SnapList snaps="snaps" />
    <button @onclick="@FetchMore">Load more...</button>
</div>

<a href="/">Go back to the homepage</a>

@code {
    private const string Query = @"
    query($q: String!, $offset: Int, $limit: Int){
        findSnapsByName(name:$q, offset:$offset, limit:$limit){
            snap_id
            package_name
            title
            summary
            icon_url
            ratings_average
        }
    }
    ";

    protected class SearchModel
    {
        public string SearchString { get; set; } = "";
        public uint Offset { get; set; }
        public uint Limit { get; set; } = 20;
    }

    SearchModel searchModel = new();

    Snap[]? snaps;

    bool dirty { get; set; } = false;

    private PersistingComponentStateSubscription persistingSubscription;

    protected override async Task OnInitializedAsync()
    {
        string? newSearchString;
        NavManager.TryGetQueryString<string>("q", out newSearchString, "");
        searchModel.SearchString = newSearchString ?? "";
        NavManager.LocationChanged += HandleLocationChanged;

        persistingSubscription = 
            ApplicationState.RegisterOnPersisting(PersistSnaps);

        if (ApplicationState.TryTakeFromJson<Snap[]>(
                    "snaps", out var restored))
        {
            snaps = restored!;
        }
        else
        {
            snaps = await Fetch(true);
        }
    }

    private Task PersistSnaps()
    {
        ApplicationState.PersistAsJson("snaps", snaps);

        return Task.CompletedTask;
    }

    protected async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        NavManager.TryGetQueryString<string>("q", out var newSearchString, "");
        if (searchModel.SearchString == newSearchString || newSearchString is null) return;

        snaps = await Fetch(true);
        StateHasChanged();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        dirty = true;
        searchModel.SearchString = e.Value?.ToString() ?? "";
    }

    private async Task OnSearchFocusLost(FocusEventArgs e)
    {
        if (dirty)
        {
            snaps = await Fetch(true);
            StateHasChanged();
        }
    }

    private async Task OnSearchTyping(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            snaps = await Fetch(true);
            StateHasChanged();
        }
    }

    async Task FetchMore()
    {
        searchModel.Offset += searchModel.Limit;
        snaps = snaps.Concat(await Fetch(false)).ToArray();
    }

    async Task<Snap[]> Fetch(bool newRequest = false)
    {
        if (newRequest)
        {
            searchModel.Offset = 0;
        }

        GraphQLRequest request = new GraphQLRequest
        {
            Query = Query,
            Variables = new
            {
                q = searchModel.SearchString,
                offset = searchModel.Offset,
                limit = searchModel.Limit,
            },
        };
        var response = await Client.SendQueryAsync<FindSnapsByName>(request);
        dirty = false;
        return response?.Data?.findSnapsByName ?? Array.Empty<Snap>();
    }

    void IDisposable.Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
        persistingSubscription.Dispose();
    }
}