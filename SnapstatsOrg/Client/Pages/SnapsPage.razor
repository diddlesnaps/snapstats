@page "/snaps"
@implements IDisposable
@inject IGraphQLClient Client
@inject NavigationManager NavManager

<h1>Search the Snap Store</h1>
<div class='search'>
    <label>
        Enter a term to search
        <input type="text" class="form-control" @oninput="OnSearchChanged" @onblur="OnSearchFocusLost" @onkeyup="OnSearchTyping" />
        @*<button @onclick="OnButtonClicked">Search</button>*@
    </label>
</div>

<div>
    <h2>Search results:</h2>
    <SnapList snaps="@Results" />
    <button @onclick="@FetchMore">Load more...</button>
</div>

<a href="/">Go back to the homepage</a>

@code {
    private const string Query = @"
        query($q: String!, $offset: Int, $limit: Int){
            findSnapsByName(name:$q, offset:$offset, limit:$limit){
                snap_id
                package_name
                title
                summary
                icon_url
                ratings_average
            }
        }
    ";

    protected class SearchModel
    {
        public string SearchString { get; set; } = "";
        public uint Offset { get; set; }
        public uint Limit { get; set; } = 20;
    }

    SearchModel searchModel = new();

    Snap[] Results = Array.Empty<Snap>();

    bool dirty { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        string? newSearchString;
        NavManager.TryGetQueryString<string>("q", out newSearchString, "");
        searchModel.SearchString = newSearchString ?? "";
        NavManager.LocationChanged += HandleLocationChanged;
        if (!Results.Any()) Results = await Fetch(true);
    }

    protected async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        NavManager.TryGetQueryString<string>("q", out var newSearchString, "");
        if (searchModel.SearchString == newSearchString || newSearchString is null) return;

        Results = await Fetch(true);
        StateHasChanged();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        dirty = true;
        searchModel.SearchString = e.Value?.ToString() ?? "";
    }

    private async Task OnSearchFocusLost(FocusEventArgs e)
    {
        if (dirty)
        {
            Results = await Fetch(true);
            StateHasChanged();
        }
    }

    private async Task OnSearchTyping(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && dirty)
        {
            Results = await Fetch(true);
            StateHasChanged();
        }
    }

    async Task FetchMore()
    {
        searchModel.Offset += searchModel.Limit;
        Results = Results.Concat(await Fetch(false)).ToArray();
    }

    async Task<Snap[]> Fetch(bool newRequest = false)
    {
        if (newRequest)
        {
            searchModel.Offset = 0;
        }

        GraphQLRequest request = new GraphQLRequest
        {
            Query = Query,
            Variables = new
            {
                q = searchModel.SearchString,
                offset = searchModel.Offset,
                limit = searchModel.Limit,
            },
        };
        var response = await Client.SendQueryAsync<FindSnapsByName>(request);
        dirty = false;
        return response?.Data?.findSnapsByName ?? Array.Empty<Snap>();
    }

    void IDisposable.Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }
}